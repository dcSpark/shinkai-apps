// embedding_model.rs
// This file joins the GGUF model parts generated by the conversion script.
// Do not edit manually.

#[path = "embedding_model_part1.rs"]
pub(crate) mod embedding_model_part1;

#[path = "embedding_model_part2.rs"]
pub(crate) mod embedding_model_part2;

#[path = "embedding_model_part3.rs"]
pub(crate) mod embedding_model_part3;

#[path = "embedding_model_part4.rs"]
pub(crate) mod embedding_model_part4;

#[path = "embedding_model_part5.rs"]
pub(crate) mod embedding_model_part5;

#[path = "embedding_model_part6.rs"]
pub(crate) mod embedding_model_part6;

#[path = "embedding_model_part7.rs"]
pub(crate) mod embedding_model_part7;

#[path = "embedding_model_part8.rs"]
pub(crate) mod embedding_model_part8;

#[path = "embedding_model_part9.rs"]
pub(crate) mod embedding_model_part9;

#[path = "embedding_model_part10.rs"]
pub(crate) mod embedding_model_part10;

#[path = "embedding_model_part11.rs"]
pub(crate) mod embedding_model_part11;

pub fn get_model_data() -> &'static [u8] {
    use std::sync::OnceLock;
    static FULL_MODEL_DATA: OnceLock<Vec<u8>> = OnceLock::new();

    FULL_MODEL_DATA.get_or_init(|| {
        let mut result = Vec::with_capacity(
            embedding_model_part1::MODEL_DATA_PART1.len() +
            embedding_model_part2::MODEL_DATA_PART2.len() +
            embedding_model_part3::MODEL_DATA_PART3.len() +
            embedding_model_part4::MODEL_DATA_PART4.len() +
            embedding_model_part5::MODEL_DATA_PART5.len() +
            embedding_model_part6::MODEL_DATA_PART6.len() +
            embedding_model_part7::MODEL_DATA_PART7.len() +
            embedding_model_part8::MODEL_DATA_PART8.len() +
            embedding_model_part9::MODEL_DATA_PART9.len() +
            embedding_model_part10::MODEL_DATA_PART10.len() +
            embedding_model_part11::MODEL_DATA_PART11.len()
        );

        result.extend_from_slice(embedding_model_part1::MODEL_DATA_PART1);
        result.extend_from_slice(embedding_model_part2::MODEL_DATA_PART2);
        result.extend_from_slice(embedding_model_part3::MODEL_DATA_PART3);
        result.extend_from_slice(embedding_model_part4::MODEL_DATA_PART4);
        result.extend_from_slice(embedding_model_part5::MODEL_DATA_PART5);
        result.extend_from_slice(embedding_model_part6::MODEL_DATA_PART6);
        result.extend_from_slice(embedding_model_part7::MODEL_DATA_PART7);
        result.extend_from_slice(embedding_model_part8::MODEL_DATA_PART8);
        result.extend_from_slice(embedding_model_part9::MODEL_DATA_PART9);
        result.extend_from_slice(embedding_model_part10::MODEL_DATA_PART10);
        result.extend_from_slice(embedding_model_part11::MODEL_DATA_PART11);

        result
    }).as_slice()
}

pub const MODEL_NAME: &str = "snowflake-arctic-embed:xs";

pub fn get_model_name() -> &'static str {
    MODEL_NAME
}
